Para que serve as Branches?

O uso de branches no Git é útil ao desenvolver novas aplicações que podem quebrar o código existente ou que ainda não estão finalizadas, 
e você não deseja salvá-las na branch principal (main ou master). 
No entanto, quando a nova aplicação estiver concluída e for considerada estável, é possível mesclá-la à branch principal.

1- git branch (A branch atual e onde a estrela indica que você está atualmente nessa branch)
Para sair, use: Q
2- git checkout -b nome_da_branch
3- git checkout nome_da_branch (Alternar entre branches)
4- Modificar o arquivo
5- git add
6- git diff nome_da_branch (Para ver o que foi modificado)
6- git commit
7- git push -u origin nome_da_branch (Configurar a branch)

Se desejar, você pode criar uma solicitação de pull para mesclar.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Conflitos no Git localmente:

Vamos dar uma olhada em uma situação da vida real: Existem conflitos de mesclagem no Git, onde basicamente você está construindo sua própria branch e talvez outras pessoas estejam escrevendo código em suas branches. 
E a branch principal está sendo atualizada de diferentes lugares. Portanto, é possível que várias pessoas mudem os mesmos arquivos. E às vezes o Git não entende qual código você deseja manter, ou qual código é redundante, ou qual código você deseja eliminar. 
Para resolver isso: Manualmente.

Vamos tentar isso:

1. Criar uma nova branch
2. Adicionar algo na branch que você criou
3. `git commit -am` (irá fazer commit e adicionar ao mesmo tempo. No entanto, é usado para modificar um arquivo, não para criar um)
4. Mude para a branch principal e modifique a mesma linha (main/master)
5. Se você tentar mudar a branch após a mesma linha, aparecerá uma mensagem:





